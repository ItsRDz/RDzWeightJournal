/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package my.contacteditor;
import javax.swing.*;
import java.io.*;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Arrays;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.awt.*;
import java.math.BigDecimal;
import java.math.RoundingMode;

/**
 *
 * @author Richard Depaz
 */

@SuppressWarnings("serial")
public class ContactEditorUI extends javax.swing.JFrame {
    int count = 0;
    String before = "";
    String timeStamp = new SimpleDateFormat("(MM/dd/yyy)").format(Calendar.getInstance().getTime());
    int totalEntries = 0;
    String filename = "";
    String[] listDesc = new String[9999];
    int itemNum = 1;
    
    /**
     * Creates new form ContactEditorUI
     */
    public ContactEditorUI() {
        initComponents();
        initialize();
    }
    
    private void initialize() {
        this.setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("Icon3.png")));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jButton7 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jButton9 = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("RDz Weight Journal v1.0.0");
        setForeground(java.awt.Color.darkGray);
        setResizable(false);

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel6.setText("Weight (lb):");

        jTextField5.setBorder(javax.swing.BorderFactory.createEmptyBorder(4, 6, 4, 6));
        jTextField5.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField5KeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField5KeyTyped(evt);
            }
        });

        jList1.setBorder(javax.swing.BorderFactory.createEmptyBorder(4, 15, 4, 15));
        jList1.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jList1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jList1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jList1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jList1);
        DefaultListCellRenderer renderer = (DefaultListCellRenderer) jList1.getCellRenderer();
        renderer.setHorizontalAlignment(SwingConstants.CENTER);
        jList1.setFixedCellHeight(25);

        jButton1.setText("Add");
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton3.setText("Remove");
        jButton3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Clear List");
        jButton4.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton8.setText("Save");
        jButton8.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton6.setText("Save As");
        jButton6.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton2.setText("Load");
        jButton2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton10.setText("Set Desc");
        jButton10.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jLabel10.setText(".");

        jTextField1.setBorder(javax.swing.BorderFactory.createEmptyBorder(4, 6, 4, 6));
        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField1KeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField1KeyTyped(evt);
            }
        });

        jLabel11.setText("Date (m-d-y):");

        jTextField2.setBorder(javax.swing.BorderFactory.createEmptyBorder(4, 6, 4, 6));
        jTextField2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField2KeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField2KeyTyped(evt);
            }
        });

        jTextField3.setBorder(javax.swing.BorderFactory.createEmptyBorder(4, 6, 4, 6));
        jTextField3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField3KeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField3KeyTyped(evt);
            }
        });

        jTextField4.setBorder(javax.swing.BorderFactory.createEmptyBorder(4, 6, 4, 6));
        jTextField4.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField4KeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField4KeyTyped(evt);
            }
        });

        jLabel12.setText("-");

        jLabel13.setText("-");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel11)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel12)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel13)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 42, Short.MAX_VALUE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton10, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton8, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jButton1, jButton10, jButton2, jButton3, jButton4, jButton6, jButton8});

        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11)
                            .addComponent(jLabel12)
                            .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel13)
                            .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(50, 50, 50)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTextField5.setHorizontalAlignment(JTextField.CENTER);

        jTextField5.setDocument(new MaxLengthTextDocument(3));
        jTextField1.setHorizontalAlignment(JTextField.CENTER);

        jTextField1.setDocument(new MaxLengthTextDocument(1));
        jTextField2.setHorizontalAlignment(JTextField.CENTER);
        jTextField2.setDocument(new MaxLengthTextDocument(2));
        jTextField3.setHorizontalAlignment(JTextField.CENTER);
        jTextField3.setDocument(new MaxLengthTextDocument(2));
        jTextField4.setHorizontalAlignment(JTextField.CENTER);
        jTextField4.setDocument(new MaxLengthTextDocument(4));

        jButton5.setText("Exit");
        jButton5.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("RDz Weight Journal");

        jButton7.setText("Info");
        jButton7.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jLabel1.setText("Hello!");

        jLabel5.setText("0 lbs");

        jLabel4.setText("Weight change:");

        jLabel7.setText("0");

        jLabel3.setText("Total entries:");

        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("Current File: [Empty]");

        jButton9.setText("New");
        jButton9.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton5))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel7))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel5)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton5)
                    .addComponent(jButton7)
                    .addComponent(jButton9))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    DefaultListModel<String> dlm = new DefaultListModel<>();
    
    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        if(jLabel8.getText().contains("*")){
            int result = JOptionPane.showConfirmDialog(null, "Save changes before exiting?", null, JOptionPane.YES_NO_CANCEL_OPTION);

            if(result == JOptionPane.YES_OPTION){
                jButton8ActionPerformed(evt);
                System.exit(0);
            }
            else if(result == JOptionPane.NO_OPTION){
                System.exit(0);
            }
        }
        else{
            int result = JOptionPane.showConfirmDialog(null, "Are you sure you want to exit?", null, JOptionPane.YES_NO_OPTION);

            if(result == JOptionPane.YES_OPTION){
                System.exit(0);
            }
        }
    }//GEN-LAST:event_jButton5ActionPerformed
    
    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        JOptionPane.showMessageDialog(null, "RDz Weight Journal v1.0.0\nRichard Depaz (@ItsRDz)\n2017", "Info", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jButton7ActionPerformed

    @SuppressWarnings("unchecked")
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if(jLabel8.getText().contains("*")){
            int result = JOptionPane.showConfirmDialog(null, "Save changes before loading?", null, JOptionPane.YES_NO_CANCEL_OPTION);
            
            if(result == JOptionPane.YES_OPTION){
                jButton8ActionPerformed(evt);
            }
            else if(result == JOptionPane.CANCEL_OPTION){
                return;
            }
        }
        
        JFileChooser chooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter(".bin","bin");
        chooser.setFileFilter(filter);
        int result2 = chooser.showOpenDialog(null);

        if(result2 == JFileChooser.APPROVE_OPTION){
            try{
                File f = chooser.getSelectedFile();
                filename = f.getAbsolutePath();

                FileInputStream fis = null;
                ObjectInputStream ois = null;
                
                try{
                    fis = new FileInputStream(filename);
                    ois = new ObjectInputStream(fis);
                    
                    //Unchecked cast has been suppressed.
                    dlm = (DefaultListModel<String>) ois.readObject();
                    listDesc = (String[]) ois.readObject();
                }
                finally{
                    if(ois != null){
                        ois.close();
                    }
                    if(fis != null){
                        fis.close();
                    }
                }
                
                jList1.setModel(dlm);
                
                if(jList1.getLastVisibleIndex() != -1){
                    before = dlm.getElementAt(jList1.getModel().getSize() - 1);
                    String temp = dlm.getElementAt(jList1.getModel().getSize() - 1);
                    temp = temp.substring(17, 22);
                    before = temp;
                }
                
                jLabel8.setText("Current File: " + f.getName());

                //totalEntries = jList1.getLastVisibleIndex() + 1;
                totalEntries = jList1.getModel().getSize();
                itemNum = jList1.getModel().getSize() + 2;
                jLabel7.setText(Integer.toString(totalEntries));
                jLabel5.setText("0 lbs");
                jLabel1.setText("File loaded!");
            }
            catch(IOException | ClassNotFoundException e){
                jLabel1.setText("Failed to load.");
            }
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        JFileChooser chooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter(".bin","bin");
        chooser.setFileFilter(filter);
        int status = chooser.showSaveDialog(null);
        
        if(status == JFileChooser.APPROVE_OPTION){
            try{
                File f = chooser.getSelectedFile();
                //This is used to indicate the exact path as to where the files should be saved.
                filename = f.getAbsolutePath();
                
                if(filename.toLowerCase().contains(".bin")){
                    FileOutputStream fos = null;
                    ObjectOutputStream oos = null;
                    
                    try{
                        fos = new FileOutputStream(filename, true);
                        oos = new ObjectOutputStream(fos);

                        oos.writeObject(dlm);
                        oos.writeObject(listDesc);
                    }
                    finally{
                        if(oos != null){
                            oos.close();
                        }
                        if(fos != null){
                            fos.close();
                        }
                    }
                    
                    jLabel8.setText("Current File: " + f.getName());
                }
                else{
                    FileOutputStream fos = null;
                    ObjectOutputStream oos = null;
                    
                    try{
                        fos = new FileOutputStream(filename + ".bin");
                        oos = new ObjectOutputStream(fos);

                        oos.writeObject(dlm);
                        oos.writeObject(listDesc);
                    }
                    finally{
                        if(oos != null){
                            oos.close();
                        }
                        if(fos != null){
                            fos.close();
                        }
                    }
                    
                    jLabel8.setText("Current File: " + f.getName() + ".bin");
                }

                jLabel1.setText("File saved!");
            }
            catch(IOException e){
                jLabel1.setText("Failed to save.");
            }
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        if(jList1.getModel().getSize() == 0){
            JOptionPane.showMessageDialog(null, "List is already cleared", null, JOptionPane.WARNING_MESSAGE);
        }
        else{
            int result3 = JOptionPane.showConfirmDialog(null, "Clear list?", null, JOptionPane.YES_NO_OPTION);

            if(result3 == JOptionPane.YES_OPTION){
                dlm.clear();
                totalEntries = 0;
                jLabel7.setText(Integer.toString(totalEntries));
                before = "";
                Arrays.fill(listDesc, null);
                jLabel5.setText("0 lbs");
                jLabel1.setText("List cleared!");
                itemNum = 1;

                String temp = jLabel8.getText();
                if(!temp.contains("*")){
                    jLabel8.setText(temp + "*");
                }
            }
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        if(jList1.getSelectedIndex() != -1 && jList1.getLastVisibleIndex() != 0){
            int result = JOptionPane.showConfirmDialog(null, "Remove item?", null, JOptionPane.YES_NO_OPTION);
            
            if(result != JOptionPane.YES_OPTION)
            {
                return;
            }
            
            int check = jList1.getSelectedIndex();
            String meh;
            
            if(jList1.getLastVisibleIndex() != check){
                while(check != jList1.getLastVisibleIndex()){
                    listDesc[check] = listDesc[check + 1];
                    meh = dlm.get(check + 1);
                    dlm.set(check + 1, meh);
                    check++;
                }
                
                listDesc[jList1.getLastVisibleIndex()] = null;
            }
            else{
                listDesc[check] = null;
            }
            
            dlm.remove(jList1.getSelectedIndex());
            
            before = dlm.getElementAt(jList1.getModel().getSize() - 1);
            String temp = dlm.getElementAt(jList1.getModel().getSize() - 1);
            temp = temp.substring(17, 22);
            before = temp;
            
            totalEntries--;
            itemNum--;
            jLabel7.setText(Integer.toString(totalEntries));
            
            jLabel1.setText("Selected weight removed!");
            
            String temp2 = jLabel8.getText();
            if(!temp2.contains("*")){
                jLabel8.setText(temp2 + "*");
            }
        }
        else if(jList1.getSelectedIndex() != -1 && jList1.getLastVisibleIndex() == 0){
            int result = JOptionPane.showConfirmDialog(null, "Remove item?", null, JOptionPane.YES_NO_OPTION);
            
            if(result != JOptionPane.YES_OPTION)
            {
                return;
            }
            
            dlm.clear();
            totalEntries = 0;
            Arrays.fill(listDesc, null);
            jLabel7.setText(Integer.toString(totalEntries));
            before = "";
            jLabel5.setText("0 lbs");
            
            String temp = jLabel8.getText();
            if(!temp.contains("*")){
                jLabel8.setText(temp + "*");
            }
        }
        else{
            JOptionPane.showMessageDialog(null, "Select a list item", null, JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String weight = jTextField5.getText().trim();
        String dec = jTextField1.getText();
        String month = jTextField2.getText();
        String day = jTextField3.getText();
        String year = jTextField4.getText();
        String temp = jLabel8.getText();
        boolean keepGoing = true;
        
        while(keepGoing){
            if((!weight.matches("[0-9]+") || !dec.matches("[0-9]+")) && (!weight.equals("") && !dec.equals(""))){
                if(count == 1){
                    jLabel1.setText("...we've been over this. ENTER A PERMISSIBLE NUMBER.");
                    jTextField5.setText("");
                    jTextField1.setText("");
                    count++;
                    break;
                }
                else if(count == 2){
                    jLabel1.setText("Really... are you having a laugh?");
                    jTextField5.setText("");
                    jTextField1.setText("");
                    count++;
                    break;
                }
                else if(count == 3){
                    jLabel1.setText("You know what? I'm done. Bye");
                    jTextField5.setText("");
                    jTextField1.setText("");
                    count++;
                    break;
                }
                else if(count > 3){
                    jLabel1.setText("...");
                    jTextField5.setText("");
                    jTextField1.setText("");
                    break;
                }

                jLabel1.setText("...seriously? It's weight. Numbers only.");
                jTextField5.setText("");
                jTextField1.setText("");
                count++;
                break;
            }
            
            if(!weight.equals("") && !dec.equals("")){
                double check = Double.parseDouble(weight);
                double check2 = Double.parseDouble(dec);

                if(check == 0 && check2 == 0){
                    jLabel1.setText("Nice try. Unless you're a ghost, there's no way you're 0 lbs!");
                    jTextField5.setText("");
                    jTextField1.setText("");
                    break;
                }
            }

            if(!weight.equals("") && !dec.equals("") && !month.equals("") && !day.equals("") && !year.equals("") && count <= 1){
                String date = generateDate(month, day, year);
                String input = weight;
                input += "." + dec;
                
                if(jTextField5.getText().length() < 3){
                    if(jTextField5.getText().length() == 2){
                        input = "";
                        input += "0";
                        input += jTextField5.getText().trim();
                        input += "." + dec;
                    }
                    else if(jTextField5.getText().length() == 1){
                        input = "";
                        input += "00";
                        input += jTextField5.getText().trim();
                        input += "." + dec;
                    }
                }
                
                double kg = Double.parseDouble(input) * 0.45359237;
                kg = kg * 10;
                kg = Math.round(kg);
                kg = kg / 10;
                String kg2 = checkDouble(kg);
                dlm.addElement(date + "  -  " + input + " lbs " + "/ " + kg2 + " kg ");
                itemNum++;
                jList1.setModel(dlm);
                jTextField5.setText("");
                jTextField1.setText("");
                jTextField2.setText("");
                jTextField3.setText("");
                jTextField4.setText("");

                if(!before.equals("")){
                    double weightDouble = Double.parseDouble(input);
                    double beforeDouble = Double.parseDouble(before);
                    jLabel1.setText("Weight added successfully!");

                    if(weightDouble < beforeDouble){
                        double lost = beforeDouble - weightDouble;
                        //The following lines will round a double by two decimal places.
                        BigDecimal bd = new BigDecimal(lost);
                        bd = bd.setScale(2, RoundingMode.HALF_UP);
                        lost = bd.doubleValue();
                        double kglost = lost * 0.45359237;
                        BigDecimal bd2 = new BigDecimal(kglost);
                        bd2 = bd2.setScale(1, RoundingMode.HALF_UP);
                        kglost = bd2.doubleValue();
                        jLabel5.setText("-" + lost + " lbs" + " / " + "-" + kglost + " kg");
                    }
                    else if(weightDouble == beforeDouble){
                        jLabel5.setText("0 lbs");
                    }
                    else{
                        double gain = weightDouble - beforeDouble;
                        BigDecimal bd = new BigDecimal(gain);
                        bd = bd.setScale(2, RoundingMode.HALF_UP);
                        gain = bd.doubleValue();
                        double kggain = gain * 0.45359237;
                        BigDecimal bd2 = new BigDecimal(kggain);
                        bd2 = bd2.setScale(1, RoundingMode.HALF_UP);
                        kggain = bd2.doubleValue();
                        jLabel5.setText("+" + gain + " lbs" + " / " + "+" + kggain + " kg");
                    }
                }
                else{
                    jLabel1.setText("Weight added successfully!");
                }

                totalEntries++;
                jLabel7.setText(Integer.toString(totalEntries));
                before = input;
                
                if(!temp.contains("*")){
                        jLabel8.setText(temp + "*");
                }
            }
            else if(!weight.equals("") && !dec.equals("") && !month.equals("") && !day.equals("") && !year.equals("") && count > 1){
                String date = generateDate(month, day, year);
                String input = weight;
                input += "." + dec;
                
                if(jTextField5.getText().length() < 3){
                    if(jTextField5.getText().length() == 2){
                        input = "";
                        input += "0";
                        input += jTextField5.getText().trim();
                        input += "." + dec;
                    }
                    else if(jTextField5.getText().length() == 1){
                        input = "";
                        input += "00";
                        input += jTextField5.getText().trim();
                        input += "." + dec;
                    }
                }
                
                double kg = Double.parseDouble(input) * 0.45359237;
                kg = kg * 10;
                kg = Math.round(kg);
                kg = kg / 10;
                String kg2 = checkDouble(kg);
                dlm.addElement(date + "  -  " + input + " lbs " + "/ " + kg2 + " kg ");
                itemNum++;
                jList1.setModel(dlm);
                jTextField5.setText("");
                jTextField1.setText("");
                jTextField2.setText("");
                jTextField3.setText("");
                jTextField4.setText("");

                if(!before.equals("")){
                    double weightDouble = Double.parseDouble(input);
                    double beforeDouble = Double.parseDouble(before);
                    jLabel1.setText("See? Now was that so hard?");

                    if(weightDouble < beforeDouble){
                        double lost = beforeDouble - weightDouble;
                        BigDecimal bd = new BigDecimal(lost);
                        bd = bd.setScale(2, RoundingMode.HALF_UP);
                        lost = bd.doubleValue();
                        double kglost = lost * 0.45359237;
                        BigDecimal bd2 = new BigDecimal(kglost);
                        bd2 = bd2.setScale(1, RoundingMode.HALF_UP);
                        kglost = bd2.doubleValue();
                        jLabel5.setText("-" + lost + " lbs" + " / " + "-" + kglost + " kg");
                    }
                    else if(weightDouble == beforeDouble){
                        jLabel5.setText("0 lbs");
                    }
                    else{
                        double gain = weightDouble - beforeDouble;
                        BigDecimal bd = new BigDecimal(gain);
                        bd = bd.setScale(2, RoundingMode.HALF_UP);
                        gain = bd.doubleValue();
                        double kggain = gain * 0.45359237;
                        BigDecimal bd2 = new BigDecimal(kggain);
                        bd2 = bd2.setScale(1, RoundingMode.HALF_UP);
                        kggain = bd2.doubleValue();
                        jLabel5.setText("+" + gain + " lbs" + " / " + "+" + kggain + " kg");
                    }
                }
                else{
                    jLabel1.setText("See? Now was that so hard?");
                }

                totalEntries++;
                jLabel7.setText(Integer.toString(totalEntries));
                before = input;
                count = 0;
                
                if(!temp.contains("*")){
                        jLabel8.setText(temp + "*");
                }
            }
            else{
                JOptionPane.showMessageDialog(null, "Fill in all fields", null, JOptionPane.WARNING_MESSAGE);
            }

            keepGoing = false;
        }
        
        //Once input is entered, cursor resets to first text field. It makes it ready for additional input.
        jTextField5.requestFocusInWindow();
    }//GEN-LAST:event_jButton1ActionPerformed
    
    private String generateDate(String month, String day, String year){
        String date;
        
        if(month.length() == 1){
            date = "0" + month;
        }
        else{
            date = month;
        }
        
        date += "/";
        
        if(day.length() == 1){
            date += "0" + day;
        }
        else{
            date += day;
        }
        
        date += "/";
        
        //Switch is like an if/else statement except this is used for sequentially checking numbers to the parameter.
        switch(year.length()){
            case 1:
                date += "000" + year;
                break;
            case 2:
                date += "00" + year;
                break;
            case 3:
                date += "0" + year;
                break;
            default:
                date += year;
                break;
        }
        
        //This is what was used before using switch.
        /*if(year.length() == 1){
            date += "000" + year;
        }
        else if(year.length() == 2){
            date += "00" + year;
        }
        else if(year.length() == 3){
            date += "0" + year;
        }
        else{
            date += year;
        }*/
        
        date = "(" + date + ")";
        
        return date;
    }
    
    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        if(filename.equals("")){
            jButton6ActionPerformed(evt);
        }
        else{
            int result = JOptionPane.showConfirmDialog(null, "Overwrite list?", null, JOptionPane.YES_NO_OPTION);

            if(result == JOptionPane.YES_OPTION){
                try{
                    FileOutputStream fos = null;
                    ObjectOutputStream oos = null;
                    
                    try{
                        fos = new FileOutputStream(filename);
                        oos = new ObjectOutputStream(fos);

                        oos.writeObject(dlm);
                        oos.writeObject(listDesc);
                    }
                    finally{
                        if(oos != null){
                            oos.close();
                        }
                        if(fos != null){
                            fos.close();
                        }
                    }

                    jLabel1.setText("File saved!");
                    
                    String temp = jLabel8.getText();
                    temp = temp.replace("*", "");
                    jLabel8.setText(temp);
                }
                catch(IOException e){
                    jLabel1.setText("Failed to save.");
                }
            }
        }
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        if(jLabel8.getText().contains("*")){
            int result = JOptionPane.showConfirmDialog(null, "Save changes before creating new list?", null, JOptionPane.YES_NO_CANCEL_OPTION);
            
            if(result == JOptionPane.YES_OPTION){
                jButton8ActionPerformed(evt);
                clear();
            }
            else if(result == JOptionPane.NO_OPTION){
                clear();
            }
        }
        else{
            int result = JOptionPane.showConfirmDialog(null, "New list?", null, JOptionPane.YES_NO_OPTION);

            if(result == JOptionPane.YES_OPTION){
                clear();
            }
        }
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jList1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList1MouseClicked
        JList<?> list = (JList<?>)evt.getSource();
        
        Rectangle r = list.getCellBounds(0, list.getLastVisibleIndex());
        
        if (r != null && r.contains(evt.getPoint()) && evt.getClickCount() == 2) {
            int index = list.locationToIndex(evt.getPoint());
            
            if(listDesc[index] != null){
                //JOptionPane.showMessageDialog(null, listDesc[index]);
                JOptionPane.showMessageDialog(null, listDesc[index], "Description of item " + (jList1.getSelectedIndex() + 1), JOptionPane.INFORMATION_MESSAGE);
            }
            else{
                //JOptionPane.showMessageDialog(null, "No description");
                JOptionPane.showMessageDialog(null, "No description", "Description of item " + (jList1.getSelectedIndex() + 1), JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }//GEN-LAST:event_jList1MouseClicked

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        int index = jList1.getSelectedIndex();
        
        if(index >= 0){
            //String desc = JOptionPane.showInputDialog("Description of item " + (index + 1));
            String desc = JOptionPane.showInputDialog(null, "Description of item " + (index + 1), listDesc[index]);
            
            if(desc == null){
                return;
            }
            
            if(desc.trim().isEmpty()){
                if(listDesc[index] != null){
                    int result = JOptionPane.showConfirmDialog(null, "Clear description?", null, JOptionPane.YES_NO_OPTION);
                    
                    if(result == JOptionPane.YES_OPTION){
                        listDesc[index] = null;
                        String temp = dlm.get(index);
                        temp = temp.replace("*", " ");
                        dlm.set(index, temp);
                    }
                }
                else{
                    listDesc[index] = null;
                    String temp = dlm.get(index);
                    temp = temp.replace("*", " ");
                    dlm.set(index, temp);
                }
            }
            else{
                listDesc[index] = desc;
                String temp = dlm.get(index);
                
                //If list item does not have a set description already.
                if(!temp.contains("*")){
                    temp = temp.substring(0, 37);
                    dlm.set(index, temp + "*");
                }
            }
            
            String temp = jLabel8.getText();
            if(!temp.contains("*")){
                jLabel8.setText(temp + "*");
            }
        }
        else{
            JOptionPane.showMessageDialog(null, "Select a list item", null, JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jTextField5KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField5KeyPressed
        //This invokes when ENTER is pressed after input.
        if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER){
            String weight = jTextField5.getText().trim();
            String dec = jTextField1.getText();
            String month = jTextField2.getText();
            String day = jTextField3.getText();
            String year = jTextField4.getText();
            String temp = jLabel8.getText();
            boolean keepGoing = true;

            while(keepGoing){
                if((!weight.matches("[0-9]+") || !dec.matches("[0-9]+")) && (!weight.equals("") && !dec.equals(""))){
                    if(count == 1){
                        jLabel1.setText("...we've been over this. ENTER A PERMISSIBLE NUMBER.");
                        jTextField5.setText("");
                        jTextField1.setText("");
                        count++;
                        break;
                    }
                    else if(count == 2){
                        jLabel1.setText("Really... are you having a laugh?");
                        jTextField5.setText("");
                        jTextField1.setText("");
                        count++;
                        break;
                    }
                    else if(count == 3){
                        jLabel1.setText("You know what? I'm done. Bye");
                        jTextField5.setText("");
                        jTextField1.setText("");
                        count++;
                        break;
                    }
                    else if(count > 3){
                        jLabel1.setText("...");
                        jTextField5.setText("");
                        jTextField1.setText("");
                        break;
                    }

                    jLabel1.setText("...seriously? It's weight. Numbers only.");
                    jTextField5.setText("");
                    jTextField1.setText("");
                    count++;
                    break;
                }

                if(!weight.equals("") && !dec.equals("")){
                    double check = Double.parseDouble(weight);
                    double check2 = Double.parseDouble(dec);

                    if(check == 0 && check2 == 0){
                        jLabel1.setText("Nice try. Unless you're a ghost, there's no way you're 0 lbs!");
                        jTextField5.setText("");
                        jTextField1.setText("");
                        break;
                    }
                }

                if(!weight.equals("") && !dec.equals("") && !month.equals("") && !day.equals("") && !year.equals("") && count <= 1){
                    String date = generateDate(month, day, year);
                    String input = weight;
                    input += "." + dec;

                    if(jTextField5.getText().length() < 3){
                        if(jTextField5.getText().length() == 2){
                            input = "";
                            input += "0";
                            input += jTextField5.getText().trim();
                            input += "." + dec;
                        }
                        else if(jTextField5.getText().length() == 1){
                            input = "";
                            input += "00";
                            input += jTextField5.getText().trim();
                            input += "." + dec;
                        }
                    }
                    
                    double kg = Double.parseDouble(input) * 0.45359237;
                    kg = kg * 10;
                    kg = Math.round(kg);
                    kg = kg / 10;
                    String kg2 = checkDouble(kg);
                    dlm.addElement(date + "  -  " + input + " lbs " + "/ " + kg2 + " kg ");
                    itemNum++;
                    jList1.setModel(dlm);
                    jTextField5.setText("");
                    jTextField1.setText("");
                    jTextField2.setText("");
                    jTextField3.setText("");
                    jTextField4.setText("");

                    if(!before.equals("")){
                        double weightDouble = Double.parseDouble(input);
                        double beforeDouble = Double.parseDouble(before);
                        jLabel1.setText("Weight added successfully!");

                        if(weightDouble < beforeDouble){
                            double lost = beforeDouble - weightDouble;
                            BigDecimal bd = new BigDecimal(lost);
                            bd = bd.setScale(2, RoundingMode.HALF_UP);
                            lost = bd.doubleValue();
                            double kglost = lost * 0.45359237;
                            BigDecimal bd2 = new BigDecimal(kglost);
                            bd2 = bd2.setScale(1, RoundingMode.HALF_UP);
                            kglost = bd2.doubleValue();
                            jLabel5.setText("-" + lost + " lbs" + " / " + "-" + kglost + " kg");
                        }
                        else if(weightDouble == beforeDouble){
                            jLabel5.setText("0 lbs");
                        }
                        else{
                            double gain = weightDouble - beforeDouble;
                            BigDecimal bd = new BigDecimal(gain);
                            bd = bd.setScale(2, RoundingMode.HALF_UP);
                            gain = bd.doubleValue();
                            double kggain = gain * 0.45359237;
                            BigDecimal bd2 = new BigDecimal(kggain);
                            bd2 = bd2.setScale(1, RoundingMode.HALF_UP);
                            kggain = bd2.doubleValue();
                            jLabel5.setText("+" + gain + " lbs" + " / " + "+" + kggain + " kg");
                        }
                    }
                    else{
                        jLabel1.setText("Weight added successfully!");
                    }

                    totalEntries++;
                    jLabel7.setText(Integer.toString(totalEntries));
                    before = input;

                    if(!temp.contains("*")){
                            jLabel8.setText(temp + "*");
                    }
                }
                else if(!weight.equals("") && !dec.equals("") && !month.equals("") && !day.equals("") && !year.equals("") && count > 1){
                    String date = generateDate(month, day, year);
                    String input = weight;
                    input += "." + dec;

                    if(jTextField5.getText().length() < 3){
                        if(jTextField5.getText().length() == 2){
                            input = "";
                            input += "0";
                            input += jTextField5.getText().trim();
                            input += "." + dec;
                        }
                        else if(jTextField5.getText().length() == 1){
                            input = "";
                            input += "00";
                            input += jTextField5.getText().trim();
                            input += "." + dec;
                        }
                    }
                    
                    double kg = Double.parseDouble(input) * 0.45359237;
                    kg = kg * 10;
                    kg = Math.round(kg);
                    kg = kg / 10;
                    String kg2 = checkDouble(kg);
                    dlm.addElement(date + "  -  " + input + " lbs " + "/ " + kg2 + " kg ");
                    itemNum++;
                    jList1.setModel(dlm);
                    jTextField5.setText("");
                    jTextField1.setText("");
                    jTextField2.setText("");
                    jTextField3.setText("");
                    jTextField4.setText("");

                    if(!before.equals("")){
                        double weightDouble = Double.parseDouble(input);
                        double beforeDouble = Double.parseDouble(before);
                        jLabel1.setText("See? Now was that so hard?");

                        if(weightDouble < beforeDouble){
                            double lost = beforeDouble - weightDouble;
                            BigDecimal bd = new BigDecimal(lost);
                            bd = bd.setScale(2, RoundingMode.HALF_UP);
                            lost = bd.doubleValue();
                            double kglost = lost * 0.45359237;
                            BigDecimal bd2 = new BigDecimal(kglost);
                            bd2 = bd2.setScale(1, RoundingMode.HALF_UP);
                            kglost = bd2.doubleValue();
                            jLabel5.setText("-" + lost + " lbs" + " / " + "-" + kglost + " kg");
                        }
                        else if(weightDouble == beforeDouble){
                            jLabel5.setText("0 lbs");
                        }
                        else{
                            double gain = weightDouble - beforeDouble;
                            BigDecimal bd = new BigDecimal(gain);
                            bd = bd.setScale(2, RoundingMode.HALF_UP);
                            gain = bd.doubleValue();
                            double kggain = gain * 0.45359237;
                            BigDecimal bd2 = new BigDecimal(kggain);
                            bd2 = bd2.setScale(1, RoundingMode.HALF_UP);
                            kggain = bd2.doubleValue();
                            jLabel5.setText("+" + gain + " lbs" + " / " + "+" + kggain + " kg");
                        }
                    }
                    else{
                        jLabel1.setText("See? Now was that so hard?");
                    }

                    totalEntries++;
                    jLabel7.setText(Integer.toString(totalEntries));
                    before = input;
                    count = 0;

                    if(!temp.contains("*")){
                            jLabel8.setText(temp + "*");
                    }
                }
                else{
                    JOptionPane.showMessageDialog(null, "Fill in all fields", null, JOptionPane.INFORMATION_MESSAGE);
                }

                keepGoing = false;
            }
            
            //Once input is entered, cursor resets to first text field. It makes it ready for additional input.
            jTextField5.requestFocusInWindow();
        }
    }//GEN-LAST:event_jTextField5KeyPressed

    private static String checkDouble(double kg) {
        String kg2 = String.valueOf(kg);
        
        if(kg2.length() == 3)
            kg2 = "00" + kg2;
        else if(kg2.length() == 4)
            kg2 = "0" + kg2;
        
        return kg2;
    }
    
    private void jTextField5KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField5KeyTyped
        char c = evt.getKeyChar();

        //This makes sure that only letters and numbers can be inputted into the text field.
        if(!(/*Character.isAlphabetic(c) || */Character.isDigit(c) || (c == java.awt.event.KeyEvent.VK_BACK_SPACE) || c == java.awt.event.KeyEvent.VK_DELETE)){
            evt.consume();
        }

        //Once the cursor reaches index 2, it automatically skips to the next text field.
        if(jTextField5.getCaretPosition() == 2 && !(c == java.awt.event.KeyEvent.VK_BACK_SPACE)){
            jTextField1.requestFocusInWindow();
        }
    }//GEN-LAST:event_jTextField5KeyTyped

    private void jTextField1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyTyped
        char c = evt.getKeyChar();

        //This makes sure that only letters and numbers can be inputted into the text field.
        if(!(/*Character.isAlphabetic(c) || */Character.isDigit(c) || (c == java.awt.event.KeyEvent.VK_BACK_SPACE) || c == java.awt.event.KeyEvent.VK_DELETE)){
            evt.consume();
        }

        //When BACKSPACE is pressed, it automatically returns to previous text field. Makes it easier for deleting entire input.
        if(c == java.awt.event.KeyEvent.VK_BACK_SPACE && jTextField1.getCaretPosition() == 0){
            jTextField5.requestFocusInWindow();
        }
        
        //Once field is filled, goes to next one.
        if(jTextField1.getCaretPosition() == 0 && !(c == java.awt.event.KeyEvent.VK_BACK_SPACE)){
            jTextField2.requestFocusInWindow();
        }
    }//GEN-LAST:event_jTextField1KeyTyped

    private void jTextField1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyPressed
        jTextField5KeyPressed(evt);
    }//GEN-LAST:event_jTextField1KeyPressed

    private void jTextField2KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField2KeyTyped
        char c = evt.getKeyChar();
        
        if(!(Character.isDigit(c) || (c == java.awt.event.KeyEvent.VK_BACK_SPACE) || c == java.awt.event.KeyEvent.VK_DELETE)){
            evt.consume();
        }
        
        if(jTextField2.getCaretPosition() == 1 && !(c == java.awt.event.KeyEvent.VK_BACK_SPACE)){
            jTextField3.requestFocusInWindow();
        }
        
        if(c == java.awt.event.KeyEvent.VK_BACK_SPACE && jTextField2.getCaretPosition() == 0){
            jTextField1.requestFocusInWindow();
        }
    }//GEN-LAST:event_jTextField2KeyTyped

    private void jTextField3KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField3KeyTyped
        char c = evt.getKeyChar();
        
        if(!(Character.isDigit(c) || (c == java.awt.event.KeyEvent.VK_BACK_SPACE) || c == java.awt.event.KeyEvent.VK_DELETE)){
            evt.consume();
        }
        
        if(jTextField3.getCaretPosition() == 1 && !(c == java.awt.event.KeyEvent.VK_BACK_SPACE)){
            jTextField4.requestFocusInWindow();
        }
        
        //When BACKSPACE is pressed, it automatically returns to previous text field. Makes it easier for deleting entire input.
        if(c == java.awt.event.KeyEvent.VK_BACK_SPACE && jTextField3.getCaretPosition() == 0){
            jTextField2.requestFocusInWindow();
        }
    }//GEN-LAST:event_jTextField3KeyTyped

    private void jTextField4KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField4KeyTyped
        char c = evt.getKeyChar();
        
        if(!(Character.isDigit(c) || (c == java.awt.event.KeyEvent.VK_BACK_SPACE) || c == java.awt.event.KeyEvent.VK_DELETE)){
            evt.consume();
        }
        
        //When BACKSPACE is pressed, it automatically returns to previous text field. Makes it easier for deleting entire input.
        if(c == java.awt.event.KeyEvent.VK_BACK_SPACE && jTextField4.getCaretPosition() == 0){
            jTextField3.requestFocusInWindow();
        }
    }//GEN-LAST:event_jTextField4KeyTyped

    private void jTextField2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField2KeyPressed
        jTextField5KeyPressed(evt);
    }//GEN-LAST:event_jTextField2KeyPressed

    private void jTextField3KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField3KeyPressed
        jTextField5KeyPressed(evt);
    }//GEN-LAST:event_jTextField3KeyPressed

    private void jTextField4KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField4KeyPressed
        jTextField5KeyPressed(evt);
    }//GEN-LAST:event_jTextField4KeyPressed
    
    public void clear() {
        Arrays.fill(listDesc, null);
        dlm.clear();
        totalEntries = 0;
        jLabel7.setText(Integer.toString(totalEntries));
        before = "";
        jLabel5.setText("0 lbs");
        jLabel1.setText("Hello!");
        jLabel8.setText("Current File: " + "[Empty]");
        filename = "";
        itemNum = 1;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    //javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    javax.swing.UIManager.setLookAndFeel("com.jtattoo.plaf.hifi.HiFiLookAndFeel");
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ContactEditorUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ContactEditorUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ContactEditorUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ContactEditorUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                try{
                    Thread.sleep(500);
                }
                catch(InterruptedException e){
                    
                }
                
                new ContactEditorUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JList<String> jList1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    // End of variables declaration//GEN-END:variables
}